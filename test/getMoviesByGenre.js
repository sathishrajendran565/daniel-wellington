'use strict';

// tests for getMoviesByGenre
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const rewire = require('rewire');
const app = rewire('../src/movies');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('getMoviesByGenre', '/src/movies.js', 'getMoviesByGenre');

const getAvailableGeneres = app.__get__('getAvailableGenres');
const getMoviesList = app.__get__('getMoviesList');
const getReviewsByMovie = app.__get__('getReviewsByMovie');

describe('getMoviesByGenre', () => {
  before((done) => {
    done();
  });

  it('get movies sorted by genre', async () => {
    const response = await wrapped.run({pathParameters: {genre: "Comedy"}});
    expect(response).to.be.a('object');
    expect(response.statusCode).to.equal(200);
  });
});

describe('getMoviesByGenre', () => {
  before((done) => {
    done();
  });

  it('wrong format of the input should result in correct status code', async () => {
    const response = await wrapped.run({pathParameters: {genre: 1234}});
    expect(response).to.be.a('object');
    expect(response.statusCode).to.equal(400);
  });
});

describe('Get all available genres', function() {
  it('should get all available genres', async() => {
      const response = await getAvailableGeneres();
      expect(response).to.be.a('object'); 
      expect(response.genres).to.be.a('array');
  });
});

describe('Get movies list', function() {
  it('should get all movies from the list', async() => {
      const response = await getMoviesList();
      expect(response).to.be.a('array'); 
      
  });
});

describe('Get reviews by movie', function() {
  it('should get the reviews from authors for a given movie', async() => {
      const movie = {id:'283995',original_title: 'Guardians of the Galaxy Vol. 2'};
      const response = await getReviewsByMovie(movie);
      const reviews = response.reviews;
      const authorsWithNoReviews = reviews.filter((review)=> review.author_details.rating == null);
      expect(response).to.be.a('object');
      expect(response.reviews).to.not.be.null;
      expect(authorsWithNoReviews.length).to.equal(0);
    });
});
